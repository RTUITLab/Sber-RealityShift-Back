name: $(BuildID)-$(Build.SourceBranchName)

pool:
  vmImage: 'ubuntu-18.04'

stages:
- stage: build
  displayName: BuildServices
  jobs:
  - job: buildApi
    steps:
    - task: Cake@2
      inputs:
        script: 'build.cake'
        target: 'PublishApi'
        verbosity: 'Verbose'
    - publish: deploy
      artifact: api-build
- stage: packInDocker
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  jobs:
  - job: packApi
    steps:
      - download: current
        artifact: api-build
      - task: Docker@2
        inputs:
          containerRegistry: 'rtuitlab connection by admin'
          repository: 'rtuitlab/sber-realityshift-api'
          command: 'buildAndPush'
          Dockerfile: '$(Pipeline.Workspace)/api-build/Dockerfile'
          buildContext: '$(Pipeline.Workspace)/api-build'
          tags: |
            $(Build.BuildId)
            latest
- stage: deploy
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  jobs:
    - deployment: DeployApi
      displayName: Deploy api
      pool:
        vmImage: 'Ubuntu-16.04'
      environment: 'production'
      strategy:
        runOnce:
          on:
            failure:
              steps:
                - download: none
                - task: SSH@0
                  inputs:
                    sshEndpoint: 'swarm manager'
                    runOptions: 'commands'
                    commands: 'docker service rollback sber-realityshift_api'
                    readyTimeout: '20000'
          deploy:
            steps:
              - download: none
              - task: SSH@0
                inputs:
                  sshEndpoint: 'swarm manager'
                  runOptions: 'commands'
                  commands: 'docker service update --image rtuitlab/sber-realityshift-api:$(Build.BuildId) sber-realityshift_api'
                  readyTimeout: '20000'